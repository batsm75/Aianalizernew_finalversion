import osimport jsonimport timeimport requestsimport randomimport reimport textwrapfrom datetime import datetime# --- Konfigurasi ---SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))CREDENTIALS_FILE = os.path.join(SCRIPT_DIR, 'credentials.json')COINGECKO_API_BASE = 'https://api.coingecko.com/api/v3'REFRESH_INTERVAL_SECONDS = 2NEWS_API_KEY = 'pub_04af9448698b4fc89f8d13e321385574' # Replace with your actual NewsData.io API KeyNEWS_API_BASE = 'https://newsdata.io/api/1/news'GEMINI_API_KEY = 'AIzaSyDFyOGaXX75V5duTsfJFGx-S3NaFe__e5s' # Replace with your actual Gemini API KeyGEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"GEMINI_MODEL_NAME = "gemini-2.0-flash"# --- Fungsi Utilitas ---def get_terminal_width():    """Mendapatkan lebar terminal, dengan fallback."""    try:        return os.get_terminal_size().columns    except OSError:        return 80def center_text(text, width):    """Menengahkan teks dalam lebar tertentu."""    if len(text) >= width:        return text    padding = (width - len(text)) // 2    return " " * padding + text + " " * (width - len(text) - padding)def print_wrapped(text, initial_indent="", subsequent_indent="", width=None):    """Mencetak teks dengan wrapping otomatis sesuai lebar terminal."""    if width is None:        width = get_terminal_width()        effective_width = width - len(initial_indent)    wrapped_lines = textwrap.fill(        text,        width=effective_width,        initial_indent=initial_indent,        subsequent_indent=subsequent_indent,        replace_whitespace=True    )    print(wrapped_lines)def clear_screen():    """Membersihkan layar konsol."""    os.system('clear' if os.name == 'posix' else 'cls')def format_idr(amount):    """Memformat angka menjadi format mata uang IDR."""    return f"Rp {int(amount):,}".replace(",", ".")def get_current_idr_price(coin_id):    """Mengambil harga koin saat ini dalam IDR dari CoinGecko."""    try:        url = f"{COINGECKO_API_BASE}/simple/price?ids={coin_id}&vs_currencies=idr"        response = requests.get(url)        response.raise_for_status()        data = response.json()        if coin_id in data and 'idr' in data[coin_id]:            return data[coin_id]['idr']        return None    except requests.exceptions.RequestException as e:        print_wrapped(f"ERROR: Gagal mengambil harga saat ini dari CoinGecko ({coin_id}): {e}", width=get_terminal_width())        return None    except json.JSONDecodeError:        print_wrapped(f"ERROR: Gagal mendekode respons harga dari CoinGecko ({coin_id}).", width=get_terminal_width())        return None    except KeyError:        print_wrapped(f"ERROR: Simbol {coin_id} tidak ditemukan di CoinGecko atau format respons tidak terduga.", width=get_terminal_width())        return None    except Exception as e:        print_wrapped(f"ERROR: Terjadi kesalahan tidak terduga saat mengambil harga CoinGecko: {e}", width=get_terminal_width())        return Nonedef get_historical_prices(coin_id, days=90):    """Mengambil data harga historis dari CoinGecko dan mensimulasikan OHLC."""    try:        url = f"{COINGECKO_API_BASE}/coins/{coin_id}/market_chart?vs_currency=idr&days={days}"        response = requests.get(url)        response.raise_for_status()        data = response.json()        if 'prices' in data and data['prices']:            prices_list = [p[1] for p in data['prices']]                        ohlc_simulated = []            if len(prices_list) >= 2:                start_index = max(0, len(prices_list) - 30)                for i in range(start_index + 1, len(prices_list)):                    prev_close = prices_list[i-1]                    current_price_for_candle = prices_list[i]                                        open_price = prev_close                    close_price = current_price_for_candle                                        high = max(open_price, close_price) * (1 + random.uniform(0.0005, 0.002))                    low = min(open_price, close_price) * (1 - random.uniform(0.0005, 0.002))                                        ohlc_simulated.append({                        'open': open_price,                        'high': high,                        'low': low,                        'close': close_price                    })                        return prices_list, ohlc_simulated        return [], []    except requests.exceptions.RequestException as e:        print_wrapped(f"ERROR: Gagal mengambil data historis dari CoinGecko ({coin_id}): {e}", width=get_terminal_width())        return [], []    except json.JSONDecodeError:        print_wrapped(f"ERROR: Gagal mendekode respons historis dari CoinGecko ({coin_id}).", width=get_terminal_width())        return [], []    except KeyError:        print_wrapped(f"ERROR: Simbol {coin_id} tidak ditemukan di CoinGecko atau format respons tidak terduga.", width=get_terminal_width())        return [], []    except Exception as e:        print_wrapped(f"ERROR: Terjadi kesalahan tidak terduga saat mengambil data historis CoinGecko: {e}", width=get_terminal_width())        return [], []def get_crypto_news(query_term="crypto", num_articles=3):    """Mengambil berita kripto dari NewsData.io API."""    if not NEWS_API_KEY:        print_wrapped("⚠ Error: NEWS_API_KEY belum diatur. Harap daftar di NewsData.io untuk mendapatkan kunci API.", width=get_terminal_width())        return ["Fitur berita tidak aktif."]            try:        params = {            'apikey': NEWS_API_KEY,            'q': query_term,            'language': 'en',        }                response = requests.get(NEWS_API_BASE, params=params, timeout=5)        response.raise_for_status()        news_data = response.json()        articles = []        if 'results' in news_data and news_data['results']:            for i, article in enumerate(news_data['results']):                if i >= num_articles:                    break                title = article.get('title', 'Tidak ada judul')                articles.append(f"- {title}")                if not articles:            articles.append("Tidak ada berita terkini yang ditemukan untuk topik ini.")            articles.append("Coba lagi nanti atau periksa koneksi internet Anda.")                return articles    except requests.exceptions.RequestException as e:        print_wrapped(f"❌ Gagal mengambil berita: {e}. Pastikan NEWS_API_KEY benar dan ada koneksi internet.", width=get_terminal_width())        return ["Fitur berita tidak aktif karena masalah koneksi/API."]    except json.JSONDecodeError:        print_wrapped("❌ Gagal mendekode respons berita dari API.", width=get_terminal_width())        return ["Fitur berita tidak aktif karena respons API tidak valid."]# --- Perhitungan Indikator TANPA NumPy ---def calculate_ema_no_np(prices, period):    """Menghitung Exponential Moving Average (EMA) tanpa NumPy."""    if len(prices) < period:        return None        k = 2 / (period + 1)        ema = sum(prices[:period]) / period        for price in prices[period:]:        ema = (price * k) + (ema * (1 - k))            return emadef calculate_rsi_no_np(prices, period=14):    """Menghitung Relative Strength Index (RSI) tanpa NumPy."""    if len(prices) < period + 1:        return None    deltas = []    for i in range(1, len(prices)):        deltas.append(prices[i] - prices[i-1])        gains = [d if d > 0 else 0 for d in deltas]    losses = [abs(d) if d < 0 else 0 for d in deltas]    avg_gain = sum(gains[:period]) / period    avg_loss = sum(losses[:period]) / period    for i in range(period, len(gains)):        avg_gain = ((avg_gain * (period - 1)) + gains[i]) / period        avg_loss = ((avg_loss * (period - 1)) + losses[i]) / period        if avg_loss == 0:        return 100.0 if avg_gain > 0 else 50.0        rs = avg_gain / avg_loss    rsi = 100 - (100 / (1 + rs))    return rsidef calculate_macd_no_np(prices, fast_period=12, slow_period=26, signal_period=9):    """Menghitung Moving Average Convergence Divergence (MACD) tanpa NumPy."""    if len(prices) < max(fast_period, slow_period, signal_period) + 1:        return "N/A"    def _calculate_ema_series_no_np(data, period):        if len(data) < period:            return []        k = 2 / (period + 1)        ema_series = [0.0] * len(data)                ema_series[period-1] = sum(data[:period]) / period                for i in range(period, len(data)):            ema_series[i] = (data[i] * k) + (ema_series[i-1] * (1 - k))        return ema_series[period-1:]    ema_fast_series = _calculate_ema_series_no_np(prices, fast_period)    ema_slow_series = _calculate_ema_series_no_np(prices, slow_period)    min_len = min(len(ema_fast_series), len(ema_slow_series))    if min_len == 0: return "N/A"    macd_line_series = [ema_fast_series[i] - ema_slow_series[i] for i in range(len(ema_slow_series) - min_len, len(ema_slow_series))]    if len(macd_line_series) < signal_period:        return "N/A"    signal_line_series = _calculate_ema_series_no_np(macd_line_series, signal_period)    if len(macd_line_series) >= 2 and len(signal_line_series) >= 2:        if macd_line_series[-1] > signal_line_series[-1] and macd_line_series[-2] <= signal_line_series[-2]:            return "Golden Cross"        elif macd_line_series[-1] < signal_line_series[-1] and macd_line_series[-2] >= signal_line_series[-2]:            return "Death Cross"    return "Konsolidasi"# --- Fungsi Deteksi Pola Candlestick ---def detect_candlestick_pattern(ohlc_data):    """    Mendeteksi pola candlestick dasar berdasarkan data OHLC yang disimulasikan/diperoleh. Akurasi sangat bergantung pada kualitas dan jumlah data OHLC yang tersedia.    """    patterns = []    if not ohlc_data or len(ohlc_data) < 1:        return [{            "name": "DATA TIDAK CUKUP",            "type": "Informasi Terbatas",            "description": "Tidak ada cukup data historis yang memadai untuk mendeteksi pola candlestick. Mohon pastikan data tersedia (minimal 3 candle untuk pola umum).",            "action": "Lanjutkan analisis indikator lain atau coba lagi nanti."        }]        last_candle = ohlc_data[-1]    open_c = last_candle['open']    high_c = last_candle['high']    low_c = last_candle['low']    close_c = last_candle['close']    body_c = abs(close_c - open_c)    range_total_c = high_c - low_c        if range_total_c == 0:        range_total_c = 0.0000001    body_ratio_to_range_c = body_c / range_total_c    prev_candle = None    if len(ohlc_data) >= 2:        prev_candle = ohlc_data[-2]        candle1 = None    candle2 = None     if len(ohlc_data) >= 3:        candle1 = ohlc_data[-3]        candle2 = ohlc_data[-2]     # --- Pola 1-Candle ---    if body_ratio_to_range_c < 0.05:        patterns.append({            "name": "DOJI",            "type": "Ketidakpastian/Netral",            "description": "Harga pembukaan dan penutupan hampir sama, membentuk body sangat tipis. Menunjukkan keraguan ekstrem di pasar dan keseimbangan antara pembeli-penjual. Sering menjadi sinyal potensi pembalikan atau kelanjutan konsolidasi.",            "action": "TUNGGU KONFIRMASI. Hindari posisi besar sampai arah pasar jelas."        })        if body_ratio_to_range_c < 0.3 and \       (open_c - low_c) > (2 * body_c) and \       (high_c - close_c) < (0.2 * body_c):        patterns.append({            "name": "HAMMER",            "type": "Pembalikan Bullish Potensial",            "description": "Candle dengan body kecil di bagian atas dan shadow bawah yang panjang (minimal dua kali panjang body). Ini mengindikasikan bahwa meskipun harga sempat turun signifikan, pembeli berhasil mendorongnya kembali naik. Sinyal pembalikan bullish yang kuat jika muncul setelah tren turun yang jelas.",            "action": "Perhatikan konfirmasi bullish di candle berikutnya. Potensi BELI (LONG) jika berada di area support penting."        })        elif body_ratio_to_range_c < 0.3 and \         (high_c - close_c) > (2 * body_c) and \         (open_c - low_c) < (0.2 * body_c):        patterns.append({            "name": "INVERTED HAMMER",            "type": "Pembalikan Bullish Potensial",            "description": "Candle dengan body kecil di bagian bawah dan shadow atas yang panjang. Menunjukkan pembeli mencoba mendorong harga naik, namun penjual sempat menekan kembali. Jika diikuti konfirmasi, bisa menjadi sinyal pembalikan bullish yang kuat setelah tren turun.",            "action": "Perhatikan konfirmasi bullish. Potensi BELI (LONG) jika berada di area support."        })    if body_ratio_to_range_c < 0.05 and (open_c - low_c) > (3 * body_c) and (high_c - close_c) < (0.1 * body_c):        patterns.append({            "name": "DRAGONFLY DOJI",            "type": "Pembalikan Bullish Kuat",            "description": "Mirip Doji dengan shadow bawah sangat panjang dan tidak ada shadow atas. Menunjukkan tekanan jual yang kuat ditolak sepenuhnya oleh pembeli, harga ditutup di dekat harga pembukaan. Sinyal pembalikan bullish yang sangat kuat jika muncul setelah tren turun.",            "action": "Potensi BELI (LONG) yang sangat kuat. Cari konfirmasi di candle berikutnya."        })    if body_ratio_to_range_c < 0.05 and (high_c - open_c) > (3 * body_c) and (close_c - low_c) < (0.1 * body_c):        patterns.append({            "name": "GRAVESTONE DOJI",            "type": "Pembalikan Bearish Kuat",            "description": "Mirip Doji dengan shadow atas sangat panjang dan tidak ada shadow bawah. Menunjukkan tekanan beli yang kuat ditolak sepenuhnya oleh penjual, harga ditutup di dekat harga pembukaan. Sinyal pembalikan bearish yang sangat kuat jika muncul setelah tren naik.",            "action": "Potensi JUAL (SHORT) yang sangat kuat. Cari konfirmasi di candle berikutnya."        })        if body_ratio_to_range_c < 0.05 and \       (high_c - close_c) > (0.4 * range_total_c) and \       (open_c - low_c) > (0.4 * range_total_c):        patterns.append({            "name": "LONG-LEGGED DOJI",            "type": "Ketidakpastian/Netral",            "description": "Doji dengan shadow atas dan bawah yang sangat panjang, menunjukkan volatilitas ekstrem dan ketidakpastian pasar yang parah. Pembeli dan penjual sangat aktif tetapi tidak ada yang bisa mengendalikan arah.",            "action": "SANGAT WASPADA. Hindari posisi baru. Tunggu pergerakan harga yang jelas."        })    if body_ratio_to_range_c < 0.3 and \       (high_c - max(open_c, close_c)) > (0.3 * range_total_c) and \       (min(open_c, close_c) - low_c) > (0.3 * range_total_c):        patterns.append({            "name": "HIGH WAVE",            "type": "Ketidakpastian/Netral",            "description": "Mirip Spinning Top namun dengan shadow yang lebih panjang, menunjukkan keraguan dan volatilitas tinggi. Tidak ada arah yang jelas, pasar sedang mencari keseimbangan.",            "action": "SANGAT WASPADA. Hindari posisi baru. Tunggu pergerakan harga yang jelas."        })    if not patterns and body_ratio_to_range_c < 0.3:        patterns.append({            "name": "SPINNING TOP",            "type": "Ketidakpastian/Netral",            "description": "Candle dengan body kecil dan shadow atas-bawah yang relatif panjang dan seimbang. Menunjukkan keraguan di pasar; pembeli dan penjual aktif tetapi tidak ada yang dominan.",            "action": "Tunggu konfirmasi arah pasar. Posisi bisa ditutup atau dipertahankan dengan stop loss ketat."        })    # --- Pola 2-Candle ---    if prev_candle:         if prev_candle['close'] < prev_candle['open'] and \           close_c > open_c and \           close_c > prev_candle['open'] and \           open_c < prev_candle['close']:            patterns.append({                "name": "BULLISH ENGULFING",                "type": "Pembalikan Bullish Kuat",                "description": "Pola dua candle: candle merah bearish (sebelumnya) diikuti oleh candle hijau bullish (saat ini) yang lebih besar dan menelan seluruh body candle merah sebelumnya. Menandakan dominasi penuh pembeli dan pembalikan tren naik yang kuat.",                "action": "Sinyal BELI (LONG) yang kuat. Konfirmasi dengan volume tinggi jika memungkinkan."            })                elif prev_candle['close'] > prev_candle['open'] and \             close_c < open_c and \             close_c < prev_candle['open'] and \             open_c > prev_candle['close']:            patterns.append({                "name": "BEARISH ENGULFING",                "type": "Pembalikan Bearish Kuat",                "description": "Pola dua candle: candle hijau bullish (sebelumnya) diikuti oleh candle merah bearish (saat ini) yang lebih besar dan menelan seluruh body candle hijau sebelumnya. Menandakan dominasi penuh penjual dan pembalikan tren turun yang kuat.",                "action": "Sinyal JUAL (SHORT) yang kuat. Konfirmasi dengan volume tinggi jika memungkinkan."            })                elif prev_candle['close'] > prev_candle['open'] and \             open_c > close_c and \             open_c > prev_candle['close'] and \             close_c < (prev_candle['open'] + prev_candle['close']) / 2:             patterns.append({                "name": "DARK CLOUD COVER",                "type": "Pembalikan Bearish Potensial",                "description": "Pola dua candle: candle bullish kuat diikuti candle bearish yang dibuka lebih tinggi namun menutup jauh di bawah titik tengah body bullish sebelumnya. Mengindikasikan pelemahan tren naik dan potensi pembalikan turun.",                "action": "Waspada, pertimbangkan JUAL (SHORT) jika ada konfirmasi."            })                elif prev_candle['close'] < prev_candle['open'] and \             close_c > open_c and \             open_c < prev_candle['close'] and \             close_c > (prev_candle['open'] + prev_candle['close']) / 2:             patterns.append({                "name": "PIERCING PATTERN",                "type": "Pembalikan Bullish Potensial",                "description": "Pola dua candle: candle merah diikuti candle hijau yang dibuka lebih rendah namun menutup jauh di atas titik tengah body merah sebelumnya. Mengindikasikan pelemahan tren turun dan potensi pembalikan naik.",                "action": "Waspada, pertimbangkan BELI (LONG) jika ada konfirmasi."            })        if prev_candle and abs(last_candle['low'] - prev_candle['low']) < (0.001 * last_candle['low']):        if prev_candle['close'] < prev_candle['open'] and last_candle['close'] > last_candle['open']:            patterns.append({                "name": "TWEEZER BOTTOM",                "type": "Pembalikan Bullish Potensial",                "description": "Pola dua candle dengan low yang hampir sama. Candle pertama bearish, candle kedua bullish. Menunjukkan support kuat di level harga tersebut dan penolakan harga lebih rendah.",                "action": "Waspada, potensi BELI (LONG) jika tren turun melemah."            })    if prev_candle and abs(last_candle['high'] - prev_candle['high']) < (0.001 * last_candle['high']):        if prev_candle['close'] > prev_candle['open'] and last_candle['close'] < last_candle['open']:            patterns.append({                "name": "TWEEZER TOP",                "type": "Pembalikan Bearish Potensial",                "description": "Pola dua candle dengan high yang hampir sama. Candle pertama bullish, candle kedua bearish. Menunjukkan resistance kuat di level harga tersebut dan penolakan harga lebih tinggi.",                "action": "Waspada, potensi JUAL (SHORT) jika tren naik melemah."            })    # --- Pola 3-Candle ---    if candle1 and candle2:        if candle1['close'] < candle1['open'] and \           abs(candle2['close'] - candle2['open']) < (0.5 * abs(candle1['close'] - candle1['open'])) and \           close_c > open_c and \           open_c > candle2['high'] and \           close_c > (candle1['open'] + candle1['close']) / 2 :             patterns.append({                "name": "MORNING STAR",                "type": "Pembalikan Bullish Kuat",                "description": "Pola tiga candle: diawali candle bearish besar, diikuti candle kecil (bisa Doji/Spinning Top) yang menunjukkan keraguan, dan diakhiri candle bullish besar yang menembus ke atas. Sinyal kuat transisi dari tekanan jual ke beli.",                "action": "Potensi BELI (LONG) yang sangat kuat setelah konfirmasi. Cari titik masuk di awal candle bullish ketiga."            })        elif candle1['close'] > candle1['open'] and \             abs(candle2['close'] - candle2['open']) < (0.5 * abs(candle1['close'] - candle1['open'])) and \             close_c < open_c and \             open_c < candle2['low'] and \             close_c < (candle1['open'] + candle1['close']) / 2 :             patterns.append({                "name": "EVENING STAR",                "type": "Pembalikan Bearish Kuat",                "description": "Pola tiga candle: diawali candle bullish besar, diikuti candle kecil (bisa Doji/Spinning Top) yang menunjukkan keraguan, dan diakhiri candle bearish besar yang menembus ke bawah. Sinyal kuat transisi dari tekanan beli ke jual.",                "action": "Potensi JUAL (SHORT) yang sangat kuat setelah konfirmasi. Cari titik masuk di awal candle bearish ketiga."            })    if len(ohlc_data) >= 3:        c1, c2, c3 = ohlc_data[-3], ohlc_data[-2], ohlc_data[-1]        if c1['close'] > c1['open'] and c2['close'] > c2['open'] and c3['close'] > c3['open'] and \           c2['open'] >= c1['open'] and c3['open'] >= c2['open'] and \           c2['close'] > c1['close'] and c3['close'] > c2['close']:            patterns.append({                "name": "THREE WHITE SOLDIERS",                "type": "Kontinuasi Bullish Kuat",                "description": "Tiga candle bullish (hijau) berturut-turut yang kuat, masing-masing dibuka di dalam body candle sebelumnya dan ditutup lebih tinggi. Menandakan kelanjutan tren naik yang sangat kuat.",                "action": "Sinyal BELI (LONG) yang kuat. Pertimbangkan untuk menambah posisi jika tren terkonfirmasi."            })        if len(ohlc_data) >= 3:        c1, c2, c3 = ohlc_data[-3], ohlc_data[-2], ohlc_data[-1]        if c1['close'] < c1['open'] and c2['close'] < c2['open'] and c3['close'] < c3['open'] and \           c2['open'] <= c1['open'] and c3['open'] <= c2['open'] and \           c2['close'] < c1['close'] and c3['close'] < c2['close']:            patterns.append({                "name": "THREE BLACK CROWS",                "type": "Kontinuasi Bearish Kuat",                "description": "Tiga candle bearish (merah) berturut-turut yang kuat, masing-masing dibuka di dalam body candle sebelumnya dan ditutup lebih rendah. Menandakan kelanjutan tren turun yang sangat kuat.",                "action": "Sinyal JUAL (SHORT) yang kuat. Pertimbangkan untuk mengurangi posisi atau membuka posisi short baru."            })    if not patterns:        patterns.append({            "name": "TIDAK ADA POLA SPESIFIK TERIDENTIFIKASI",            "type": "Netral/Konsolidasi",            "description": "Dari data historis yang tersedia, tidak ada pola candlestick reversal atau continuation yang kuat teridentifikasi. Pasar mungkin sedang dalam fase konsolidasi atau pergerakan acak. Ini bisa berarti tidak ada sinyal jelas atau data yang kurang ideal. Selalu perhatikan volume dan konfirmasi dari indikator lain.",            "action": "Tetap HOLD atau tunggu sinyal yang lebih jelas. Lakukan riset fundamental tambahan dan pertimbangkan kondisi pasar makro."        })        return patterns# --- Autentikasi Pengguna ---def load_credentials():    """Memuat kredensial dari file."""    if os.path.exists(CREDENTIALS_FILE):        with open(CREDENTIALS_FILE, 'r') as f:            try:                return json.load(f)            except json.JSONDecodeError:                print_wrapped(f"⚠ Peringatan: File '{os.path.basename(CREDENTIALS_FILE)}' kosong atau rusak. Akan dibuat ulang.", width=get_terminal_width())                return {}            except Exception as e:                print_wrapped(f"❌ Error saat memuat kredensial: {e}", width=get_terminal_width())                return {}    return {}def save_credentials(username, password):    """Menyimpan kredensial ke file."""    try:        with open(CREDENTIALS_FILE, 'w') as f:            json.dump({'username': username, 'password': password}, f)    except Exception as e:        print_wrapped(f"❌ Error saat menyimpan kredensial: {e}", width=get_terminal_width())def register():    """Fungsi pendaftaran pengguna."""    width = get_terminal_width()    clear_screen()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("📝 PENDAFTARAN AKUN", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    print_wrapped("Buat username dan password Anda untuk masuk.", width=width, initial_indent="")    username = input("👤 Buat Username: ").strip()    password = input("🔑 Buat Password: ").strip()    if not username or not password:        print_wrapped("❌ Username dan Password tidak boleh kosong!", width=width, initial_indent="")        time.sleep(2)        return False    save_credentials(username, password)    print_wrapped("Pendaftaran berhasil! Silakan login.", width=width, initial_indent="\n✅ ")    time.sleep(2)    return Truedef login():    """Fungsi login pengguna."""    width = get_terminal_width()    clear_screen()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("🔐 SISTEM LOGIN", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    credentials = load_credentials()    if not credentials:        print_wrapped("Belum ada akun terdaftar. Silakan daftar terlebih dahulu.", width=width, initial_indent="")        time.sleep(2)        return register()    attempts = 3    while attempts > 0:        entered_username = input("👤 Masukkan Username: ").strip()        entered_password = input("🔑 Masukkan Password: ").strip()        if entered_username == credentials.get('username') and entered_password == credentials.get('password'):            print("\n✅ Login berhasil! Selamat datang kembali.")            time.sleep(1)            return True        else:            attempts -= 1            print_wrapped(f"Username atau password salah. Sisa percobaan: {attempts}", width=width, initial_indent="❌ ")            time.sleep(1)    print_wrapped("Terlalu banyak percobaan gagal. Akses ditolak.", width=width, initial_indent="🚫 ")    return False# Fitur AI Coach Trading (Istilah Umum)def ai_coach_trading_terms():    """Menampilkan istilah-istilah umum dalam dunia trading."""    width = get_terminal_width()    clear_screen()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("🤖 AI COACH TRADING", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    print_wrapped("Berikut beberapa istilah umum dalam dunia trading:", width=width, initial_indent="")    print("")    istilah = {        "Bullish": "Kondisi pasar ketika harga bergerak naik.",        "Bearish": "Kondisi pasar ketika harga bergerak turun.",        "Support": "Level harga di mana penurunan cenderung tertahan.",        "Resistance": "Level harga di mana kenaikan cenderung tertahan.",        "EMA": "Exponential Moving Average – rata-rata pergerakan harga dengan bobot lebih ke data terbaru.",        "SMA": "Simple Moving Average – rata-rata pergerakan harga biasa.",        "RSI": "Relative Strength Index – indikator momentum untuk mengukur kondisi overbought/oversold.",        "MACD": "Moving Average Convergence Divergence – indikator tren dan momentum.",        "Volume": "Jumlah aset yang diperdagangkan dalam jangka waktu tertentu.",        "Breakout": "Kondisi saat harga menembus level support/resistance dengan volume besar.",        "Scalping": "Strategi trading jangka sangat pendek.",        "Swing Trading": "Strategi trading dalam jangka menengah (hari hingga minggu).",        "Divergence": "Ketidaksesuaian arah antara harga dan indikator (misal RSI).",        "Long": "Posisi beli, berharap harga naik.",        "Short": "Posisi jual, berharap harga turun.",    }    for k, v in istilah.items():        print_wrapped(f"🔹 {k}: {v}", width=width, initial_indent="", subsequent_indent="   ")    input("\nTekan Enter untuk kembali ke menu utama...")# --- AI Coach Mentor (Percakapan) ---def _get_ai_mentor_system_prompt():    """Mengembalikan prompt sistem dasar untuk AI Mentor, dengan format yang diperbarui."""    return (        "Anda adalah 'Super Analizer AI Coach' dengan IQ 200+. Anda adalah mentor trading profesional "        "yang sangat berpengetahuan di bidang trading kripto dan forex. Jawablah pertanyaan "        "dengan sangat cerdas, jelas, ringkas, dan persuasif. "        "Fokus pada penjelasan yang to-the-point dan mudah dipahami. "        "Strukturkan jawaban Anda sebagai berikut untuk keterbacaan maksimum di konsol teks biasa:\n"        "1. Gunakan judul UTAMA dengan HURUF KAPITAL PENUH (misalnya: KONSEP KUNCI).\n"        "2. Gunakan sub-judul dengan Huruf Kapital di Awal Kata (misalnya: Aplikasi Praktis).\n"        "3. Untuk daftar, gunakan angka (1., 2., 3.) atau tanda hubung (-) untuk poin-poin.\n"        "4. Pisahkan paragraf dengan baris kosong untuk kerapian.\n"        "5. JANGAN PERNAH menggunakan tanda bintang ganda (**) atau tiga bintang (***) untuk format tebal atau miring.\n"        "Selain itu, berikan ANALISIS SENTIMEN PASAR yang mendalam, menjelaskan 'mood' pasar secara psikologis.\n"        "Sajikan strategi trading dengan gaya Timothy Ronald: langsung, berani, fokus pada potensi kekayaan jangka panjang dan eksekusi yang tegas. Hindari keraguan.\n"        "AKHIRI setiap jawaban dengan satu kutipan MOTIVASI hidup atau trading yang inspiratif dan relevan.\n"        "Jika pertanyaan adalah perhitungan matematika sederhana, jawablah hanya dengan angka hasil akhirnya. "        "Jika pertanyaan terkait trading, berikan jawaban layaknya seorang mentor profesional yang terpercaya."    )def ask_ai_mentor_gemini(user_question):    """Mengirim pertanyaan ke Gemini API (untuk AI Coach Mentor di Menu 3)."""    if not GEMINI_API_KEY:         print_wrapped("⚠ Error: GEMINI_API_KEY belum diatur. Harap dapatkan kunci API Gemini Anda dari Google AI Studio. Fitur ini tidak dapat digunakan.", width=get_terminal_width())        return "ERROR: API Key tidak ada."    system_prompt = _get_ai_mentor_system_prompt()    try:        chat_history = [            {"role": "user", "parts": [{"text": system_prompt + "\n\n" + user_question}]}        ]        payload = {"contents": chat_history}                response = requests.post(            f"{GEMINI_API_URL}?key={GEMINI_API_KEY}",            headers={'Content-Type': 'application/json'},            json=payload,            timeout=15         )        response.raise_for_status()                 result = response.json()                if result.get('candidates') and result['candidates'][0].get('content') and result['candidates'][0]['content'].get('parts'):            ai_response = result['candidates'][0]['content']['parts'][0]['text']            return ai_response        else:            return "Maaf, saya tidak dapat menghasilkan respons saat ini. Mungkin ada masalah dengan respons API atau struktur respons tidak terduga."    except requests.exceptions.Timeout:        return "Waktu respons habis. Pastikan koneksi internet Anda stabil atau coba lagi nanti."    except requests.exceptions.RequestException as e:        if response.status_code == 401:            return f"❌ ERROR API Gemini: Unauthorized (401). API Key Anda mungkin tidak valid atau belum diaktifkan. Silakan cek di Google AI Studio."        return f"Gagal menghubungi server API Gemini. Error: {e}"    except json.JSONDecodeError:        return "Gagal mendekode respons dari API Gemini. Coba lagi."    except Exception as e:        return f"Terjadi kesalahan tak terduga: {e}"def start_general_ai_coach_conversation():    """Memulai sesi percakapan dengan AI Coach Mentor (Gemini)."""    width = get_terminal_width()    clear_screen()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("💡 AI COACH MENTOR (Global)", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")    print_wrapped("Selamat datang, murid. Ajukan pertanyaan apapun tentang trading kripto atau forex.", width=width, initial_indent="")    print_wrapped("Ketik 'keluar' untuk mengakhiri sesi dan kembali ke menu utama.", width=width, initial_indent="")    while True:        user_input = input("\nAnda (Mentor): ").strip()        if user_input.lower() == 'keluar':            print_wrapped("AI Coach: Sampai jumpa, semoga sukses di pasar!", width=width, initial_indent="AI Coach: ")            time.sleep(1)            break                math_pattern = re.compile(r'^\s*(\d+(\.\d+)?)\s*([+\-*/])\s*(\d+(\.\d+)?)\s*$')        match = math_pattern.match(user_input)                if match:            try:                num1 = float(match.group(1))                operator = match.group(3)                num2 = float(match.group(4))                                if operator == '+':                    result = num1 + num2                elif operator == '-':                    result = num1 - num2                elif operator == '*':                    result = num1 * num2                elif operator == '/':                    if num2 == 0:                        result = "Tidak bisa dibagi nol!"                    else:                        result = num1 / num2                                print_wrapped(f"AI Coach: Hasilnya adalah: {result}", width=width, initial_indent="AI Coach: ")            except Exception:                 response = ask_ai_mentor_gemini(user_input)                print_wrapped(f"AI Coach: {response}", width=width, initial_indent="AI Coach: ")        else:            print_wrapped("AI Coach: Berpikir...", width=width, initial_indent="AI Coach: ")            response = ask_ai_mentor_gemini(user_input)            print_wrapped(f"AI Coach: {response}", width=width, initial_indent="AI Coach: ")# --- Analisis Trading ---def get_dynamic_tips(coach_suggestion, market_psychology, rsi, macd_status, is_crypto=True):    """Menghasilkan tips trading dinamis berdasarkan kondisi pasar."""    tips = [        "- Selalu lakukan riset mendalam (DYOR) sebelum mengambil keputusan trading.",        "- Manfaatkan alat analisis teknikal dan fundamental secara bersamaan.",        "- Jangan pernah menginvestasikan lebih dari yang Anda mampu untuk rugi.",        "- Disiplin adalah kunci: patuhi rencana trading Anda dan hindari FOMO/FUD.",        "- Edukasi diri secara terus-menerus tentang dinamika pasar."    ]    if "BUY" in coach_suggestion:        tips.append("- Pertimbangkan untuk 'Buy the Dip' jika ada koreksi sehat di tren naik.")        tips.append("- Pastikan volume perdagangan mendukung tren naik untuk validasi sinyal beli.")    elif "SELL" in coach_suggestion:        tips.append("- Jangan ragu untuk 'Cut Loss' jika harga bergerak berlawanan dengan prediksi.")        tips.append("- Waspada terhadap 'Dead Cat Bounce' sebelum melakukan pembelian di tren turun.")    elif "HOLD" in coach_suggestion:        tips.append("- Bersabar adalah strategi. Hindari overtrading di pasar yang tidak jelas arahnya.")        tips.append("- Perhatikan sentimen pasar dan peristiwa makro ekonomi untuk sinyal berikutnya.")    if rsi is not None:        if rsi > 70:            tips.append("- Aset ini berada di zona overbought, waspada potensi pembalikan atau koreksi harga.")            tips.append("- Pertimbangkan untuk mengurangi risiko atau mengambil keuntungan sebagian jika Anda sudah memiliki posisi Long.")        elif rsi < 30:            tips.append("- Aset ini berada di zona oversold, ada potensi rebound harga dalam waktu dekat.")            tips.append("- Peluang akumulasi bisa terbuka, namun tunggu konfirmasi pembalikan tren.")        if macd_status == "Golden Cross":        tips.append("- Golden Cross mengkonfirmasi momentum bullish, perhatikan kelanjutan tren.")    elif macd_status == "Death Cross":        tips.append("- Death Cross menandakan momentum bearish yang kuat, tetap waspada terhadap penurunan lebih lanjut.")        if is_crypto:        tips.append("- Gunakan strategi Dollar-Cost Averaging (DCA) untuk meminimalkan risiko volatilitas harga kripto.")    else:        tips.append("- Selalu perhatikan rilis data ekonomi penting dan pidato bank sentral, karena dampaknya besar pada pasar Forex.")        tips.append("- Kelola leverage dengan bijak, risiko di Forex sangat tinggi.")    random.shuffle(tips)    return tips[:random.randint(4, 6)]def display_analysis_results(current_price, change_7_day, change_30_day, ema7, ema25, ema99, rsi, macd_status, entry_point, cut_loss_plan, target_profit, market_psychology, trend_24h, ai_prediction, coach_suggestion, is_crypto, is_forex_simulated, long_short_analysis="", candlestick_patterns=None, lot_recommendation=None, ai_strategy_advice=""):    """Menampilkan hasil analisis ke konsol."""        width = get_terminal_width()    price_format_func = format_idr if is_crypto else lambda x: f"{x:.4f}"        print_wrapped(f"📈 Harga Saat Ini: {price_format_func(current_price)}", width=width)    print_wrapped(f"📅 Perubahan 7 Hari: {change_7_day:.2f}%" if change_7_day is not None else "📅 Perubahan 7 Hari: N/A", width=width)    print_wrapped(f"📅 Perubahan 30 Hari: {change_30_day:.2f}%" if change_30_day is not None else "📅 Perubahan 30 Hari: N/A", width=width)    print_wrapped(f"📊 EMA-7: {price_format_func(ema7)}" if ema7 is not None else "📊 EMA-7: N/A", width=width)    print_wrapped(f"📊 EMA-25: {price_format_func(ema25)}" if ema25 is not None else "📊 EMA-25: N/A", width=width)    print_wrapped(f"📊 EMA-99: {price_format_func(ema99)}" if ema99 is not None else "📊 EMA-99: N/A", width=width)        rsi_interpretation = ""    if rsi is not None:        if rsi > 70:            rsi_interpretation = " (Overbought - Potensi Koreksi)"        elif rsi < 30:            rsi_interpretation = " (Oversold - Potensi Rebound)"        else:            rsi_interpretation = " (Netral)"    print_wrapped(f"📈 RSI: {rsi:.2f}{rsi_interpretation}" if rsi is not None else "📈 RSI: N/A", width=width)    macd_interpretation = ""    if macd_status == "Golden Cross":        macd_interpretation = " (Sinyal Bullish Kuat)"    elif macd_status == "Death Cross":        macd_interpretation = " (Sinyal Bearish Kuat)"    else:        macd_interpretation = " (Tanpa Sinyal Jelas)"    print_wrapped(f"📉 MACD: {macd_status}{macd_interpretation}" if macd_status is not None else "📉 MACD: N/A", width=width)        if entry_point is not None:        print_wrapped(f"🟢 Entry Point: {price_format_func(entry_point)}", width=width)        print_wrapped(f"🛡️ Cut Loss Plan: {price_format_func(cut_loss_plan)}", width=width)    print_wrapped(f"🎯 Target Profit: {price_format_func(target_profit)}", width=width)        if lot_recommendation is not None and not is_crypto:        print_wrapped(f"📊 Rekomendasi Lot: {lot_recommendation}", width=width)    print("\n🧠 Psikologi Market:")    print_wrapped(market_psychology, width=width, initial_indent="", subsequent_indent="")    print(f"\n📈 Tren {'Coin' if is_crypto else 'Pair'} (24 Jam):")    print_wrapped(trend_24h, width=width, initial_indent="", subsequent_indent="")    if long_short_analysis:        print("\n📊 ANALISIS POSISI (Long/Short):")        print_wrapped(long_short_analysis, width=width, initial_indent="", subsequent_indent="")    if is_crypto and candlestick_patterns:        print("\n🕯️ POLA CANDLESTICK TERIDENTIFIKASI:")        if candlestick_patterns and candlestick_patterns[0]["name"] == "DATA TIDAK CUKUP":            print_wrapped(f"  - {candlestick_patterns[0]['description']}", width=width, initial_indent="  - ", subsequent_indent="    ")        else:            for i, pattern in enumerate(candlestick_patterns):                indent_level_1 = "  "                indent_level_2 = "     "                                print_wrapped(f"{i+1}. Pola: {pattern['name']} ({pattern['type']})", width=width, initial_indent=indent_level_1, subsequent_indent=indent_level_1)                                print_wrapped(                    f"Deskripsi: {pattern['description']}",                    width=width,                    initial_indent=indent_level_2,                    subsequent_indent=indent_level_2                )                print_wrapped(                    f"Saran Tindakan: {pattern['action']}",                    width=width,                    initial_indent=indent_level_2,                    subsequent_indent=indent_level_2                )                if i < len(candlestick_patterns) - 1:                    print("-" * (width // 2))        print("\n🔮 Prediksi AI Coach:")    if is_forex_simulated:        print_wrapped(f"Prediksi AI (berbasis analisis teknikal dan historis prediksi): {ai_prediction}", width=width)    else:        print_wrapped(f"Prediksi AI (berdasarkan analisis teknikal dan sentimen pasar): {ai_prediction}", width=width)    print("\n📣 Saran Coach (Buy / Sell / Hold):")    print_wrapped(coach_suggestion, width=width)    print("\n💡 Strategi AI Agent:")    print_wrapped(ai_strategy_advice, width=width, initial_indent="", subsequent_indent="")        print("\n📌 Tips:")    dynamic_tips = get_dynamic_tips(coach_suggestion, market_psychology, rsi, macd_status, is_crypto)    for tip in dynamic_tips:        print_wrapped(tip, width=width, initial_indent="", subsequent_indent="")def handle_ai_questions(coach_suggestion, market_psychology, cut_loss_plan, asset_name, is_crypto, is_forex_simulated):    """Menangani pertanyaan interaktif dari pengguna untuk AI Agent."""    width = get_terminal_width()    price_format_func = format_idr if is_crypto else lambda x: f"{x:.4f}"    print("\n--------------------------------------------------")    print_wrapped("Apakah ada pertanyaan lebih lanjut untuk AI Agent?", width=width)    print_wrapped("1. Berapa rekomendasi stop loss?", width=width, initial_indent="")    print_wrapped("2. Bagaimana berita terkini terkait aset ini?", width=width, initial_indent="")    print_wrapped("3. Tindakan yang tepat sekarang?", width=width, initial_indent="")    print_wrapped("4. Saran psikologi market?", width=width, initial_indent="")    print_wrapped("5. Pola candlestick dan perkiraan naik/turun?", width=width, initial_indent="")    print_wrapped("6. Kembali ke menu utama", width=width, initial_indent="")        choice = input("\nPilih nomor atau ketik pertanyaan Anda: ").strip().lower()    if choice == '1':        print_wrapped(f"\nAI Agent: Rekomendasi stop loss Anda adalah di sekitar {price_format_func(cut_loss_plan)}. Ini adalah level krusial untuk membatasi potensi kerugian.", width=width, initial_indent="AI Agent: ")    elif choice == '2':        if is_forex_simulated:            print_wrapped("\nAI Agent: Untuk berita terkini Forex, Anda perlu memantau kalender ekonomi (NFP, CPI, suku bunga) dan berita geopolitik dari sumber berita keuangan resmi. Data di sini adalah prediksi.", width=width, initial_indent="AI Agent: ")        elif is_crypto:            print_wrapped("\n--- Berita Kripto Terkini ---", width=width)            news_headlines = get_crypto_news(query_term=asset_name if asset_name and asset_name != 'crypto' else 'cryptocurrency')             if news_headlines:                for headline in news_headlines:                    print_wrapped(headline, width=width, initial_indent="- ", subsequent_indent="  ")            else:                print_wrapped("Tidak ada berita terkini yang ditemukan untuk topik ini.", width=width)            print_wrapped("-----------------------------", width=width)            print_wrapped("Sumber berita: NewsData.io.", width=width)     elif choice == '3':        print_wrapped(f"\nAI Agent: Berdasarkan analisis terkini, saran tindakan yang tepat adalah {coach_suggestion.replace('🟢 ', '').replace('🔴 ', '').replace('⏸️ ', '')}. Selalu konfirmasi dengan strategi dan toleransi risiko Anda.", width=width, initial_indent="AI Agent: ")    elif choice == '4':        print_wrapped(f"\nAI Agent: Psikologi market saat ini menunjukkan: {market_psychology.replace('😐 ', '').replace('Optimisme ', '').replace('Panik ', '')}. Penting untuk mengelola emosi Anda di tengah sentimen pasar.", width=width, initial_indent="AI Agent: ")    elif choice == '5':        print_wrapped("\nAI Agent: Untuk interpretasi rinci pola candlestick, silakan lihat bagian '🕯️ POLA CANDLESTICK TERIDENTIFIKASI:' di analisis utama di atas.", width=width, initial_indent="AI Agent: ")    elif choice == '6':        return False    else:        print_wrapped("\nAI Agent: Maaf, saya tidak memahami pertanyaan Anda. Silakan pilih nomor yang tersedia atau ketik pertanyaan terkait analisis.", width=width, initial_indent="AI Agent: ")    time.sleep(3)    input("Tekan Enter untuk melanjutkan analisis...")    return Truedef analyze_crypto_coin():    """Melakukan analisis koin kripto."""    clear_screen()    width = get_terminal_width()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("🔍 ANALISIS AI COIN CRYPTO", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")        coin_name = input("🔍 Masukkan nama koin (contoh: bitcoin, solana, ethereum): ").lower().strip()    is_scalper = False    while True:        trading_type_choice = input("📈 Pilih tipe trading (1: Scalper / 2: Investasi): ").strip()        if trading_type_choice == "1":            is_scalper = True            break        elif trading_type_choice == "2":            is_scalper = False            break        else:            print_wrapped("❌ Pilihan tipe trading tidak valid. Pilih '1' atau '2'.", width=width, initial_indent="❌ ")            time.sleep(1)    while True:        clear_screen()        print("╔" + "═" * (width - 2) + "╗")        print("║" + center_text(f"Analisis AI Coin Crypto ({coin_name.capitalize()})", width - 2) + "║")        print("╚" + "═" * (width - 2) + "╝\n")                prices_only_data, ohlc_data = get_historical_prices(coin_name, days=90)         current_price = get_current_idr_price(coin_name)         if current_price is None or len(prices_only_data) == 0:            print_wrapped("❌ Gagal mengambil data koin dari CoinGecko. Pastikan nama koin benar, cek koneksi internet, atau CoinGecko API sedang ada masalah.", width=width, initial_indent="❌ ")            print_wrapped("Tekan Enter untuk kembali ke menu utama.", width=width)            input()            return        change_7_day = None        change_30_day = None        if len(prices_only_data) >= 7 and prices_only_data[-7] != 0:            change_7_day = ((current_price - prices_only_data[-7]) / prices_only_data[-7]) * 100        if len(prices_only_data) >= 30 and prices_only_data[-30] != 0:            change_30_day = ((current_price - prices_only_data[-30]) / prices_only_data[-30]) * 100            perubahan_24h = None        if len(prices_only_data) >= 2:             price_24h_ago = prices_only_data[-2]             if price_24h_ago != 0:                perubahan_24h = ((current_price - price_24h_ago) / price_24h_ago) * 100        ema7 = calculate_ema_no_np(prices_only_data, 7)        ema25 = calculate_ema_no_np(prices_only_data, 25)        ema99 = calculate_ema_no_np(prices_only_data, 99)        rsi = calculate_rsi_no_np(prices_only_data)        macd_status = calculate_macd_no_np(prices_only_data, 12, 26, 9)        candlestick_patterns = detect_candlestick_pattern(ohlc_data)        # Default values (will be overridden)        cut_loss_plan = current_price * 0.88        target_profit = current_price * 1.15        entry_point = current_price        market_psychology = "😐 Market tenang, masih konsolidasi."        coin_trend_24h = "📊 Tren Harian: Konsolidasi ↔️"        ai_prediction = f"Konsolidasi di sekitar {format_idr(current_price)}."        coach_suggestion = "⏸️ HOLD"        long_short_analysis_text = ""        ai_strategy_advice = "AI Agent: Analisis menyeluruh diperlukan. Prioritaskan manajemen risiko."        # --- Base Strategy based on EMA trends ---        if ema25 is not None and ema99 is not None and current_price is not None:            if current_price > ema25 and ema25 > ema99:                coin_trend_24h = "📊 Tren Harian: Bullish Kuat 🐂 (Uptrend Terkonfirmasi)"                market_psychology = "Optimisme melonjak, sentimen bullish sangat kuat. Peluang akumulasi."                ai_prediction = f"📈 Kemungkinan besar akan melanjutkan kenaikan menuju {format_idr(current_price * 1.08)}. Koreksi minor adalah peluang masuk."                coach_suggestion = "🟢 SANGAT BUY (Posisi LONG disarankan)"                long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren naik. Posisi LONG direkomendasikan dengan manajemen risiko ketat. Konfirmasi dari beberapa indikator teknikal."                                if is_scalper:                    ai_strategy_advice = "AI Agent: Sebagai SCALPER di tren bullish kuat, fokus pada 'Buy the Dip' untuk entri cepat. Targetkan profit kecil dan cepat, keluar saat ada indikasi kelelahan tren. Gunakan stop loss sangat ketat."                else: # Investor                    ai_strategy_advice = "AI Agent: Sebagai INVESTOR di tren bullish kuat, ini adalah waktu yang baik untuk akumulasi bertahap. Fokus pada pertumbuhan jangka panjang. Pertimbangkan DCA saat koreksi. Jangan FOMO, sabar adalah kunci."            elif current_price < ema25 and ema25 < ema99:                coin_trend_24h = "📊 Tren Harian: Bearish Kuat 🐻 (Downtrend Terkonfirmasi)"                market_psychology = "Kepanikan menyelimuti pasar, sentimen bearish sangat dominan. Waspada penurunan tajam."                ai_prediction = f"📉 Prediksi penurunan berkelanjutan, potensi menyentuh {format_idr(current_price * 0.92)}. Hindari menangkap pisau jatuh."                coach_suggestion = "🔴 SANGAT SELL (Posisi SHORT disarankan)"                long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren turun. Posisi SHORT direkomendasikan dengan target profit di level support berikutnya."                if is_scalper:                    ai_strategy_advice = "AI Agent: Sebagai SCALPER di tren bearish kuat, fokus pada posisi SHORT untuk profit cepat. Manfaatkan setiap pantulan harga sebagai peluang shorting. Waspada 'Dead Cat Bounce' dan terapkan stop loss agresif."                else: # Investor                    ai_strategy_advice = "AI Agent: Sebagai INVESTOR di tren bearish kuat, hindari membuka posisi baru. Fokus pada perlindungan modal. Cari titik akumulasi di harga yang jauh lebih rendah atau tunggu konfirmasi pembalikan tren."            elif abs(ema25 - ema99) / ema99 < 0.01:                coin_trend_24h = "📊 Tren Harian: Sideways ↔️ (Fase Konsolidasi)"                market_psychology = "😐 Market tenang, masih dalam fase konsolidasi atau sideway. Sentimen campuran."                ai_prediction = f"🔎 Arah pasar masih belum jelas, harga bergerak di sekitar {format_idr(current_price)}. Tunggu konfirmasi breakout atau berita fundamental yang signifikan."                coach_suggestion = "⏸️ HOLD (Waspada, tunggu sinyal lebih jelas)"                long_short_analysis_text = "Pasar berada dalam fase konsolidasi. Hindari posisi besar sampai ada konfirmasi breakout. Lakukan akumulasi kecil di area support atau distribusi di area resistance."                                if is_scalper:                    ai_strategy_advice = "AI Agent: Sebagai SCALPER di pasar sideways, Anda bisa mencoba 'range trading' (beli di support, jual di resistance). Namun, lakukan dengan volume kecil dan stop loss ketat karena breakout bisa tiba-tiba."                else: # Investor                    ai_strategy_advice = "AI Agent: Sebagai INVESTOR di pasar sideways, ini adalah fase akumulasi atau distribusi. Gunakan strategi DCA atau tunggu konfirmasi breakout/breakdown yang jelas. Kesabaran adalah kunci."            else:                if current_price > ema25:                    coin_trend_24h = "📊 Tren Harian: Bullish Ringan 🐂"                    market_psychology = "Optimisme hati-hati, ada potensi kenaikan."                    ai_prediction = f"📈 Potensi kenaikan ringan, perhatikan level resistance terdekat."                    coach_suggestion = "🟢 BUY (Dengan hati-hati)"                    long_short_analysis_text = "Tren naik ringan. Posisi LONG bisa dipertimbangkan dengan stop loss ketat."                    if is_scalper:                        ai_strategy_advice = "AI Agent: Sebagai SCALPER di tren bullish ringan, cari peluang entry di pullbacks. Manfaatkan volatilitas intraday untuk profit cepat, namun tetap waspada pembalikan mendadak."                    else: # Investor                        ai_strategy_advice = "AI Agent: Sebagai INVESTOR di tren bullish ringan, ini adalah sinyal awal tren naik. Mulai akumulasi bertahap atau pertahankan posisi yang ada. Perhatikan momentum dan konfirmasi dari volume."                else:                    coin_trend_24h = "📊 Tren Harian: Bearish Ringan 🐻"                    market_psychology = "Kekhawatiran ringan, ada potensi penurunan."                    ai_prediction = f"📉 Potensi penurunan ringan, perhatikan level support terdekat."                    coach_suggestion = "🔴 SELL (Dengan hati-hati)"                    long_short_analysis_text = "Tren turun ringan. Posisi SHORT bisa dipertimbangkan dengan stop loss ketat."                    if is_scalper:                        ai_strategy_advice = "AI Agent: Sebagai SCALPER di tren bearish ringan, hati-hati dengan posisi LONG. Jika memungkinkan, cari peluang SHORT saat harga naik ke resistance. Fokus pada manajemen risiko ketat."                    else: # Investor                        ai_strategy_advice = "AI Agent: Sebagai INVESTOR di tren bearish ringan, hindari membuka posisi baru. Pertimbangkan untuk mengambil keuntungan dari posisi LONG atau kurangi risiko. Tunggu konfirmasi tren."        else: # Fallback if EMA data is not enough            if perubahan_24h is not None:                if perubahan_24h > 0:                    coin_trend_24h = "📊 Tren Harian: Bullish Ringan 🐂"                    market_psychology = "Sentimen positif jangka pendek."                    ai_prediction = "📈 Pasar menunjukkan pergerakan naik dalam 24 jam terakhir."                    coach_suggestion = "⏸️ HOLD (Amati)"                    long_short_analysis_text = "Pergerakan naik jangka pendek. Perlu konfirmasi lebih lanjut."                    if is_scalper:                        ai_strategy_advice = "AI Agent: Sebagai SCALPER, amati pergerakan positif 24 jam terakhir. Cari konfirmasi breakout minor untuk entri cepat. Fokus pada target profit intraday."                    else: # Investor                        ai_strategy_advice = "AI Agent: Sebagai INVESTOR, pergerakan positif 24 jam terakhir adalah sinyal awal. Amati untuk konfirmasi tren jangka menengah sebelum melakukan investasi signifikan."                elif perubahan_24h < 0:                    coin_trend_24h = "📊 Tren Harian: Bearish Ringan 🐻"                    market_psychology = "Sentimen negatif jangka pendek."                    ai_prediction = "📉 Pasar menunjukkan pergerakan turun dalam 24 jam terakhir."                    coach_suggestion = "⏸️ HOLD (Amati)"                    long_short_analysis_text = "Pergerakan turun jangka pendek. Perlu konfirmasi lebih lanjut."                    if is_scalper:                        ai_strategy_advice = "AI Agent: Sebagai SCALPER, waspada terhadap pergerakan turun 24 jam terakhir. Cari peluang SHORT saat harga naik ke resistance. Pertimbangkan untuk 'cut loss' jika posisi LONG Anda merugi."                    else: # Investor                        ai_strategy_advice = "AI Agent: Sebagai INVESTOR, hindari masuk di tengah tren turun jangka pendek ini. Amati level support utama dan tunggu sinyal pembalikan yang kuat untuk akumulasi."                else:                    coin_trend_24h = "📊 Tren Harian: Sideways ↔️ (Kurangnya Arah Jelas)"                    market_psychology = "😐 Market tenang, masih konsolidasi."                    ai_prediction = f"🔎 Arah pasar masih belum jelas, harga bergerak di sekitar {format_idr(current_price)}. Tunggu konfirmasi breakout atau berita fundamental yang signifikan."                    coach_suggestion = "⏸️ HOLD (Waspada, tunggu sinyal lebih jelas)"                    long_short_analysis_text = "Pasar berada dalam fase konsolidasi. Hindari posisi besar sampai ada konfirmasi breakout. Lakukan akumulasi kecil di area support atau distribusi di area resistance."                    if is_scalper:                        ai_strategy_advice = "AI Agent: Sebagai SCALPER, pasar sideways bisa jadi peluang 'range trading'. Namun, lakukan dengan sangat hati-hati dan stop loss ketat. Prioritaskan keamanan modal."                    else: # Investor                        ai_strategy_advice = "AI Agent: Sebagai INVESTOR, pasar sideways adalah waktu untuk bersabar. Gunakan waktu ini untuk riset lebih lanjut atau menunggu sinyal yang lebih jelas dari pasar."        # --- Override based on RSI (high priority) ---        if rsi is not None:            if rsi > 75:                 coach_suggestion = "🔴 SANGAT SELL (Overbought Ekstrem, risiko koreksi sangat tinggi)"                ai_prediction = f"📈 Waspada koreksi signifikan, aset berada dalam kondisi overbought ekstrem. Prediksi penurunan jangka pendek sangat tinggi."                market_psychology = "Euforia pasar berlebihan, koreksi besar bisa terjadi kapan saja."                long_short_analysis_text = "Aset sangat overbought. Pertimbangkan untuk menutup posisi LONG atau membuka posisi SHORT jangka pendek dengan hati-hati."                if is_scalper:                    ai_strategy_advice = "AI Agent: Sebagai SCALPER, ini adalah peluang SHORT yang sangat baik di zona overbought ekstrem. Targetkan koreksi cepat. Pastikan exit Anda jelas."                else: # Investor                    ai_strategy_advice = "AI Agent: Sebagai INVESTOR, aset sangat overbought. Ambil keuntungan dari posisi LONG. Hindari membuka posisi baru dan siapkan diri untuk koreksi."            elif rsi < 25:                 coach_suggestion = "🟢 SANGAT BUY (Oversold Ekstrem, potensi rebound sangat kuat)"                ai_prediction = f"📉 Potensi pembalikan naik sangat tinggi, aset berada dalam kondisi oversold ekstrem. Prediksi kenaikan signifikan dalam jangka pendek."                market_psychology = "Ketakutan berlebihan di pasar, peluang rebound besar sedang menanti."                long_short_analysis_text = "Aset sangat oversold. Peluang kuat untuk posisi LONG, namun tunggu konfirmasi awal pembalikan."                if is_scalper:                    ai_strategy_advice = "AI Agent: Sebagai SCALPER, ini adalah peluang LONG yang menarik di zona oversold ekstrem. Masuk saat ada konfirmasi pembalikan cepat untuk profit intraday."                else: # Investor                    ai_strategy_advice = "AI Agent: Sebagai INVESTOR, aset sangat oversold. Ini adalah waktu yang tepat untuk akumulasi. Gunakan strategi DCA dan targetkan rebound jangka menengah."                # --- Override based on MACD (higher priority than general trend, but below RSI extreme) ---        if macd_status == "Death Cross":            if "BUY" in coach_suggestion: # If RSI said BUY, but MACD says SELL, then HOLD (conflict)                 coach_suggestion = "⏸️ HOLD (Waspada, sinyal Death Cross muncul)"                 ai_prediction = "📉 MACD Death Cross mengindikasikan tekanan jual. Prediksi perlu kehati-hatian."                 long_short_analysis_text = "Death Cross menandakan perubahan momentum negatif. Hati-hati dengan posisi LONG."                 if is_scalper:                     ai_strategy_advice = "AI Agent: Sebagai SCALPER, meskipun ada sinyal BUY, Death Cross adalah peringatan kuat. Pertimbangkan SHORT atau hindari posisi hingga tren lebih jelas."                 else: # Investor                     ai_strategy_advice = "AI Agent: Sebagai INVESTOR, Death Cross MACD sangat penting. Hindari posisi LONG. Fokus pada perlindungan modal atau tunggu sinyal pembalikan kuat."            elif "SELL" not in coach_suggestion: # If not already a strong SELL, make it one                 coach_suggestion = "🔴 SANGAT SELL (Sinyal bearish kuat terkonfirmasi)"                 ai_prediction = f"📉 Waspada turun lebih jauh. MACD Death Cross mengkonfirmasi tren bearish yang kuat. Prediksi penurunan berkelanjutan."                 long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren turun. Posisi SHORT direkomendasikan dengan target profit di level support berikutnya."                 if is_scalper:                     ai_strategy_advice = "AI Agent: Sebagai SCALPER, Death Cross adalah sinyal SHORT yang sangat kuat. Manfaatkan momentum turun ini dengan target profit agresif dan stop loss ketat."                 else: # Investor                     ai_strategy_advice = "AI Agent: Sebagai INVESTOR, Death Cross MACD mengkonfirmasi tren bearish. Pertimbangkan untuk keluar dari posisi LONG atau bersiap untuk akumulasi di harga yang lebih rendah."        elif macd_status == "Golden Cross":            if "SELL" in coach_suggestion: # If RSI said SELL, but MACD says BUY, then HOLD (conflict)                 coach_suggestion = "⏸️ HOLD (Waspada, sinyal Golden Cross muncul)"                 ai_prediction = "📈 MACD Golden Cross mengindikasikan momentum beli. Prediksi perlu kehati-hatian."                 long_short_analysis_text = "Golden Cross menandakan perubahan momentum positif. Hati-hati dengan posisi SHORT."                 if is_scalper:                     ai_strategy_advice = "AI Agent: Sebagai SCALPER, meskipun ada sinyal SELL, Golden Cross adalah peringatan kuat. Pertimbangkan LONG atau hindari posisi hingga tren lebih jelas."                 else: # Investor                     ai_strategy_advice = "AI Agent: Sebagai INVESTOR, Golden Cross MACD sangat penting. Pertimbangkan untuk masuk posisi LONG atau tingkatkan alokasi pada koreksi kecil."            elif "BUY" not in coach_suggestion: # If not already a strong BUY, make it one                 coach_suggestion = "🟢 SANGAT BUY (Sinyal bullish kuat terkonfirmasi)"                 ai_prediction = f"📈 Potensi kenaikan lebih lanjut. MACD Golden Cross mengkonfirmasi tren bullish yang kuat. Prediksi kenaikan berkelanjutan."                 long_short_analysis_text = "Golden Cross mengkonfirmasi tren bullish. Pertimbangkan posisi LONG."                 if is_scalper:                     ai_strategy_advice = "AI Agent: Sebagai SCALPER, Golden Cross adalah sinyal BUY yang sangat kuat. Manfaatkan momentum naik ini dengan target profit agresif dan stop loss ketat."                 else: # Investor                     ai_strategy_advice = "AI Agent: Sebagai INVESTOR, Golden Cross MACD mengkonfirmasi tren bullish. Ini adalah waktu yang baik untuk membuka atau menambah posisi LONG. Fokus pada potensi pertumbuhan jangka panjang."        # --- Override based on Strong Candlestick Pattern (highest priority for immediate action) ---        # This will refine the strategy advice and coaching suggestion based on strong visual patterns.        # Only apply if a strong, clear pattern is identified.        if candlestick_patterns and candlestick_patterns[0]["name"] != "DATA TIDAK CUKUP":            top_pattern = candlestick_patterns[0]             if "Bullish" in top_pattern["type"] and ("Kuat" in top_pattern["type"] or "Pembalikan" in top_pattern["type"]):                coach_suggestion = "🟢 SANGAT BUY (Pola Candlestick Bullish Kuat)"                ai_prediction = f"📈 Pola {top_pattern['name']} mengindikasikan pembalikan/kelanjutan bullish kuat. Prediksi AI: Kenaikan signifikan dalam waktu dekat."                long_short_analysis_text = f"Pola {top_pattern['name']} terdeteksi, menunjukkan dominasi pembeli. Sangat direkomendasikan posisi LONG."                if is_scalper:                    ai_strategy_advice = f"AI Agent: Sebagai SCALPER, pola {top_pattern['name']} adalah sinyal emas untuk LONG. Masuk agresif, target profit cepat, dan keluar saat momentum melambat."                else:                    ai_strategy_advice = f"AI Agent: Sebagai INVESTOR, pola {top_pattern['name']} adalah konfirmasi bullish yang sangat kuat. Pertimbangkan untuk akumulasi besar atau menambah posisi. Ini adalah peluang pertumbuhan jangka panjang."            elif "Bearish" in top_pattern["type"] and ("Kuat" in top_pattern["type"] or "Pembalikan" in top_pattern["type"]):                coach_suggestion = "🔴 SANGAT SELL (Pola Candlestick Bearish Kuat)"                ai_prediction = f"📉 Pola {top_pattern['name']} mengindikasikan pembalikan/kelanjutan bearish kuat. Prediksi AI: Penurunan tajam dalam waktu dekat."                long_short_analysis_text = f"Pola {top_pattern['name']} terdeteksi, menunjukkan dominasi penjual. Sangat direkomendasikan posisi SHORT."                if is_scalper:                    ai_strategy_advice = f"AI Agent: Sebagai SCALPER, pola {top_pattern['name']} adalah sinyal emas untuk SHORT. Masuk agresif, target profit cepat dari penurunan, dan gunakan stop loss ketat."                else:                    ai_strategy_advice = f"AI Agent: Sebagai INVESTOR, pola {top_pattern['name']} adalah konfirmasi bearish yang sangat kuat. Pertimbangkan untuk mengurangi eksposur atau keluar dari posisi LONG. Jaga modal Anda."        # --- Re-calculate entry_point, cut_loss_plan, target_profit based on the final determined coach_suggestion/strategy ---        # More dynamic calculation based on current_price and trading style                # Base volatility adjustment (can be improved with actual ATR, but for simulation, fixed percentage)        base_volatility_percent = 0.005 # 0.5% as a base "fluctuation"                # Adjust percentages based on trading style        if is_scalper:            risk_percent = 0.005 # 0.5% risk            reward_percent = 0.0075 # 0.75% reward (1:1.5 ratio)        else: # Investor            risk_percent = 0.03 # 3% risk            reward_percent = 0.06 # 6% reward (1:2 ratio)        if "BUY" in coach_suggestion:             entry_point = current_price * (1 - (0.001 if is_scalper else 0.002)) # Aim slightly below for good entry            cut_loss_plan = entry_point * (1 - risk_percent)            target_profit = entry_point * (1 + reward_percent)        elif "SELL" in coach_suggestion:            entry_point = current_price * (1 + (0.001 if is_scalper else 0.002)) # Aim slightly above for good entry            cut_loss_plan = entry_point * (1 + risk_percent) # For short, cut loss is above entry            target_profit = entry_point * (1 - reward_percent) # For short, target profit is below entry        else: # HOLD / Sideways            entry_point = current_price            # In sideways, target is often smaller, risk is also confined            if is_scalper:                cut_loss_plan = current_price * (1 - 0.005)                target_profit = current_price * (1 + 0.005)            else:                cut_loss_plan = current_price * (1 - 0.015)                target_profit = current_price * (1 + 0.015)                # Ensure values are sensible (e.g., cut loss not above target profit for long, etc.)        if cut_loss_plan >= target_profit and "BUY" in coach_suggestion:            cut_loss_plan = entry_point * (1 - risk_percent * 0.5) # Reduce risk if conflict            target_profit = entry_point * (1 + reward_percent * 0.5)        elif cut_loss_plan <= target_profit and "SELL" in coach_suggestion:            cut_loss_plan = entry_point * (1 + risk_percent * 0.5)            target_profit = entry_point * (1 - reward_percent * 0.5)        display_analysis_results(current_price, change_7_day, change_30_day, ema7, ema25, ema99, rsi, macd_status, entry_point, cut_loss_plan, target_profit, market_psychology, coin_trend_24h, ai_prediction, coach_suggestion, is_crypto=True, is_forex_simulated=False, long_short_analysis=long_short_analysis_text, candlestick_patterns=candlestick_patterns, lot_recommendation=None, ai_strategy_advice=ai_strategy_advice)        if not handle_ai_questions(coach_suggestion, market_psychology, cut_loss_plan, coin_name, is_crypto=True, is_forex_simulated=False):            return                time.sleep(REFRESH_INTERVAL_SECONDS)def analyze_forex_pair():    """Melakukan analisis pasangan Forex."""    clear_screen()    width = get_terminal_width()    print("╔" + "═" * (width - 2) + "╗")    print("║" + center_text("📊 ANALISIS AI FOREX", width - 2) + "║")    print("╚" + "═" * (width - 2) + "╝\n")        pair_name = input("🔍 Masukkan nama pasangan Forex (contoh: XAUUSD, EURUSD): ").upper().strip()    modal = 0.0    while True:        modal_input = input("💰 Masukkan modal Anda (contoh: 1000000): ").strip()        try:            modal = float(modal_input)            if modal <= 0:                raise ValueError            break        except ValueError:            print_wrapped("❌ Modal harus berupa angka positif!", width=width, initial_indent="❌ ")            time.sleep(1)    is_scalper = False    while True:        trading_type_choice = input("📈 Pilih tipe trading (1: Scalper / 2: Investasi): ").strip()        if trading_type_choice == "1":            is_scalper = True            break        elif trading_type_choice == "2":            is_scalper = False            break        else:            print_wrapped("❌ Pilihan tipe trading tidak valid. Pilih '1' atau '2'.", width=width, initial_indent="❌ ")            time.sleep(1)    simulated_price_initial = 1950.00 if pair_name == "XAUUSD" else (1.0800 if pair_name == "EURUSD" else 1.2500)    simulated_price = simulated_price_initial    historical_simulated_prices = [simulated_price_initial * (1 + random.uniform(-0.01, 0.01)) for _ in range(100)]    historical_simulated_prices.append(simulated_price_initial)    while True:        clear_screen()        print("╔" + "═" * (width - 2) + "╗")        print("║" + center_text(f"Analisis AI Forex ({pair_name})", width - 2) + "║")        print("╚" + "═" * (width - 2) + "╝\n")                change_magnitude = simulated_price * 0.0005        simulated_price += random.uniform(-change_magnitude, change_magnitude)                if pair_name == "XAUUSD":            simulated_price = round(simulated_price, 2)        else:            simulated_price = round(simulated_price, 5)        historical_simulated_prices.append(simulated_price)        if len(historical_simulated_prices) > 100:            historical_simulated_prices = historical_simulated_prices[1:]        change_7_day = None        change_30_day = None        perubahan_24h = None        if len(historical_simulated_prices) >= 7 and historical_simulated_prices[-7] != 0:            change_7_day = ((simulated_price - historical_simulated_prices[-7]) / historical_simulated_prices[-7]) * 100        if len(historical_simulated_prices) >= 30 and historical_simulated_prices[-30] != 0:            change_30_day = ((simulated_price - historical_simulated_prices[-30]) / historical_simulated_prices[-30]) * 100        if len(historical_simulated_prices) > 0 and historical_simulated_prices[0] != 0:            perubahan_24h = ((simulated_price - historical_simulated_prices[0]) / historical_simulated_prices[0]) * 100        ema7 = calculate_ema_no_np(historical_simulated_prices, 7)        ema25 = calculate_ema_no_np(historical_simulated_prices, 25)        ema99 = calculate_ema_no_np(historical_simulated_prices, 99)        rsi = calculate_rsi_no_np(historical_simulated_prices)        macd_status = calculate_macd_no_np(historical_simulated_prices, 12, 26, 9)        # Default values (will be overridden)        cut_loss_plan = simulated_price * 0.995        target_profit = simulated_price * 1.008        entry_point = simulated_price        market_psychology = "😐 Market tenang, masih konsolidasi."        pair_trend_24h = "📊 Tren Harian: Konsolidasi ↔️"        ai_prediction = f"Konsolidasi di sekitar {simulated_price:.4f}."        coach_suggestion = "⏸️ HOLD"        long_short_analysis_text = ""         ai_strategy_advice = "AI Agent: Analisis menyeluruh diperlukan. Prioritaskan manajemen risiko."        # --- Base Strategy based on EMA trends ---        if ema25 is not None and ema99 is not None and simulated_price is not None:            if simulated_price > ema25 and ema25 > ema99:                pair_trend_24h = "📊 Tren Harian: Bullish Kuat 🐂 (Uptrend Terkonfirmasi)"                market_psychology = "Optimisme melonjak, sentimen bullish sangat kuat. Peluang akumulasi."                ai_prediction = f"📈 Prediksi kenaikan signifikan terkonfirmasi, target menuju {round(simulated_price * 1.008, 4)}. Koreksi minor adalah peluang masuk."                coach_suggestion = "🟢 SANGAT BUY (Posisi LONG disarankan)"                long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren naik. Posisi LONG direkomendasikan dengan manajemen risiko ketat. Konfirmasi dari beberapa indikator teknikal."                if is_scalper:                    ai_strategy_advice = (                        "AI Agent: Sebagai SCALPER di tren bullish kuat, cari entri di pullback untuk profit cepat. "                        "Fokus pada volatilitas intraday dan terapkan stop loss ketat. Jangan serakah."                    )                else: # Investor                    ai_strategy_advice = (                        "AI Agent: Sebagai INVESTOR di tren bullish kuat, pertimbangkan untuk menambah posisi. "                        "Fokus pada target jangka panjang dan kelola risiko dengan bijak. Abaikan fluktuasi kecil."                    )            elif simulated_price < ema25 and ema25 < ema99:                pair_trend_24h = "📊 Tren Harian: Bearish Kuat 🐻 (Downtrend Terkonfirmasi)"                market_psychology = "Kepanikan menyelimuti pasar, sentimen bearish sangat dominan. Waspada penurunan tajam."                ai_prediction = f"📉 Prediksi penurunan berkelanjutan, potensi menyentuh {round(simulated_price * 0.992, 4)}. Hindari menangkap pisau jatuh."                coach_suggestion = "🔴 SANGAT SELL (Posisi SHORT disarankan)"                long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren turun. Posisi SHORT direkomendasikan dengan target profit di level support berikutnya."                if is_scalper:                    ai_strategy_advice = (                        "AI Agent: Sebagai SCALPER di tren bearish kuat, fokus pada posisi SHORT saat harga naik ke resistance. "                        "Targetkan profit cepat dari penurunan harga. Disiplin dengan stop loss Anda."                    )                else: # Investor                    ai_strategy_advice = (                        "AI Agent: Sebagai INVESTOR di tren bearish kuat, hindari membuka posisi LONG. "                        "Fokus pada perlindungan modal. Tunggu konfirmasi pembalikan tren yang jelas sebelum masuk."                    )            elif abs(ema25 - ema99) / ema99 < 0.001:                 pair_trend_24h = "📊 Tren Harian: Sideways ↔️ (Fase Konsolidasi)"                market_psychology = "😐 Market tenang, masih dalam fase konsolidasi atau sideway. Sentimen campuran."                ai_prediction = f"🔎 Arah pasar masih belum jelas, harga bergerak di sekitar {simulated_price:.4f}. Tunggu konfirmasi breakout atau berita fundamental yang signifikan."                coach_suggestion = "⏸️ HOLD (Waspada, tunggu sinyal lebih jelas)"                long_short_analysis_text = "Pasar berada dalam fase konsolidasi. Hindari posisi besar sampai ada konfirmasi breakout. Lakukan akumulasi kecil di area support atau distribusi di area resistance."                if is_scalper:                    ai_strategy_advice = (                        "AI Agent: Sebagai SCALPER di pasar sideways, Anda bisa coba 'range trading' dengan lot kecil. "                        "Penting untuk selalu menggunakan stop loss ketat dan target profit realistis."                    )                else: # Investor                    ai_strategy_advice = (                        "AI Agent: Sebagai INVESTOR di pasar sideways, ini adalah waktu untuk bersabar dan observasi. "                        "Jangan masuk posisi besar sampai ada konfirmasi tren yang jelas. Pelajari data fundamental."                    )            else:                 if simulated_price > ema25:                    pair_trend_24h = "📊 Tren Harian: Bullish Ringan 🐂"                    market_psychology = "Optimisme hati-hati, ada potensi kenaikan."                    ai_prediction = f"📈 Potensi kenaikan ringan, perhatikan level resistance terdekat."                    coach_suggestion = "🟢 BUY (Dengan hati-hati)"                    long_short_analysis_text = "Tren naik ringan. Posisi LONG bisa dipertimbangkan dengan stop loss ketat."                    if is_scalper:                        ai_strategy_advice = (                            "AI Agent: Sebagai SCALPER di tren bullish ringan, cari peluang entri di koreksi kecil. "                            "Fokus pada profit cepat dan keluar saat momentum mulai melambat."                        )                    else: # Investor                        ai_strategy_advice = (                            "AI Agent: Sebagai INVESTOR di tren bullish ringan, pertimbangkan masuk dengan ukuran posisi konservatif. "                            "Amati penguatan tren untuk menambah posisi di kemudian hari."                        )                else:                    pair_trend_24h = "📊 Tren Harian: Bearish Ringan 🐻"                    market_psychology = "Kekhawatiran ringan, ada potensi penurunan."                    ai_prediction = f"📉 Potensi penurunan ringan, perhatikan level support terdekat."                    coach_suggestion = "🔴 SELL (Dengan hati-hati)"                    long_short_analysis_text = "Tren turun ringan. Posisi SHORT bisa dipertimbangkan dengan stop loss ketat."                    if is_scalper:                        ai_strategy_advice = (                            "AI Agent: Sebagai SCALPER di tren bearish ringan, hati-hati dengan posisi LONG. "                            "Jika ada peluang, coba posisi SHORT saat harga memantul ke resistance."                        )                    else: # Investor                        ai_strategy_advice = (                            "AI Agent: Sebagai INVESTOR di tren bearish ringan, pertimbangkan untuk mengurangi risiko. "                            "Hindari membuka posisi baru dan tunggu sinyal pembalikan yang lebih kuat."                        )        else: # Fallback if EMA data is not enough            if perubahan_24h is not None:                if perubahan_24h > 0:                    pair_trend_24h = "📊 Tren Harian: Bullish Ringan 🐂"                    market_psychology = "Sentimen positif jangka pendek."                    ai_prediction = "📈 Pasar menunjukkan pergerakan naik dalam 24 jam terakhir."                    coach_suggestion = "⏸️ HOLD (Amati)"                    long_short_analysis_text = "Pergerakan naik jangka pendek. Perlu konfirmasi lebih lanjut."                    if is_scalper:                        ai_strategy_advice = (                            "AI Agent: Sebagai SCALPER, amati pergerakan positif 24 jam terakhir. "                            "Cari konfirmasi untuk entri cepat, tetapi waspada terhadap pembalikan."                        )                    else: # Investor                        ai_strategy_advice = (                            "AI Agent: Sebagai INVESTOR, pergerakan positif jangka pendek memerlukan konfirmasi. "                            "Jangan terburu-buru. Amati data fundamental dan teknikal lebih lanjut."                        )                elif perubahan_24h < 0:                    pair_trend_24h = "📊 Tren Harian: Bearish Ringan 🐻"                    market_psychology = "Sentimen negatif jangka pendek."                    ai_prediction = "📉 Pasar menunjukkan pergerakan turun dalam 24 jam terakhir."                    coach_suggestion = "⏸️ HOLD (Amati)"                    long_short_analysis_text = "Pergerakan turun jangka pendek. Perlu konfirmasi lebih lanjut."                    if is_scalper:                        ai_strategy_advice = (                            "AI Agent: Sebagai SCALPER, waspada terhadap pergerakan turun 24 jam terakhir. "                            "Cari peluang SHORT jika harga memantul ke resistance. Disiplin dengan stop loss."                        )                    else: # Investor                        ai_strategy_advice = (                            "AI Agent: Sebagai INVESTOR, hindari masuk di tengah tren turun jangka pendek ini. "                            "Fokus pada perlindungan modal dan tunggu sinyal pembalikan yang jelas."                        )                else:                    pair_trend_24h = "📊 Tren Harian: Sideways ↔️ (Kurangnya Arah Jelas)"                    market_psychology = "😐 Market tenang, masih konsolidasi."                    ai_prediction = f"🔎 Arah pasar masih belum jelas, harga bergerak di sekitar {simulated_price:.4f}. Tunggu konfirmasi breakout atau berita fundamental yang signifikan."                    coach_suggestion = "⏸️ HOLD (Waspada, tunggu sinyal lebih jelas)"                    long_short_analysis_text = "Pasar berada dalam fase konsolidasi. Hindari posisi besar sampai ada konfirmasi breakout. Lakukan akumulasi kecil di area support atau distribusi di area resistance."                    if is_scalper:                        ai_strategy_advice = (                            "AI Agent: Sebagai SCALPER, pasar sideways bisa jadi peluang 'range trading'. "                            "Identifikasi support dan resistance dengan tepat dan gunakan stop loss ketat."                        )                    else: # Investor                        ai_strategy_advice = (                            "AI Agent: Sebagai INVESTOR, pasar sideways adalah waktu untuk bersabar. "                            "Gunakan waktu ini untuk riset lebih lanjut atau menunggu sinyal yang lebih jelas dari pasar."                        )        # --- Override based on RSI (high priority) ---        if rsi is not None:            if rsi > 75:                 coach_suggestion = "🔴 SANGAT SELL (Overbought Ekstrem, risiko koreksi sangat tinggi)"                ai_prediction = f"📈 Waspada koreksi signifikan, aset berada dalam kondisi overbought ekstrem. Prediksi penurunan jangka pendek sangat tinggi."                market_psychology = "Euforia pasar berlebihan, koreksi besar bisa terjadi kapan saja."                long_short_analysis_text = "Aset sangat overbought. Pertimbangkan untuk menutup posisi LONG atau membuka posisi SHORT jangka pendek dengan hati-hati."                if is_scalper:                    ai_strategy_advice = (                        "AI Agent: Sebagai SCALPER, ini adalah peluang SHORT yang sangat baik di zona overbought ekstrem. "                        "Manfaatkan potensi koreksi cepat, keluar saat target tercapai."                    )                else: # Investor                    ai_strategy_advice = (                        "AI Agent: Sebagai INVESTOR, aset sangat overbought. Ambil keuntungan dari posisi LONG Anda. "                        "Hindari membuka posisi baru dan siapkan diri untuk koreksi yang mungkin terjadi."                    )            elif rsi < 25:                 coach_suggestion = "🟢 SANGAT BUY (Oversold Ekstrem, potensi rebound sangat kuat)"                ai_prediction = f"📉 Potensi pembalikan naik sangat tinggi, aset berada dalam kondisi oversold ekstrem. Prediksi kenaikan signifikan dalam jangka pendek."                market_psychology = "Ketakutan berlebihan di pasar, peluang rebound besar sedang menanti."                long_short_analysis_text = "Aset sangat oversold. Peluang kuat untuk posisi LONG, namun tunggu konfirmasi awal pembalikan."                if is_scalper:                    ai_strategy_advice = (                        "AI Agent: Sebagai SCALPER, ini adalah peluang LONG yang menarik di zona oversold ekstrem. "                        "Masuk saat ada konfirmasi pembalikan cepat untuk profit intraday."                    )                else: # Investor                    ai_strategy_advice = (                        "AI Agent: Sebagai INVESTOR, aset sangat oversold. Ini adalah waktu yang tepat untuk akumulasi. "                        "Gunakan strategi DCA dan targetkan rebound jangka menengah."                    )                # --- Override based on MACD (higher priority than general trend, but below RSI extreme) ---        if macd_status == "Death Cross":            if "BUY" in coach_suggestion:                  coach_suggestion = "⏸️ HOLD (Waspada, sinyal Death Cross muncul)"                 ai_prediction = "📉 MACD Death Cross mengindikasikan tekanan jual. Prediksi perlu kehati-hatian."                 long_short_analysis_text = "Death Cross menandakan perubahan momentum negatif. Hati-hati dengan posisi LONG."                 if is_scalper:                     ai_strategy_advice = (                         "AI Agent: Sebagai SCALPER, meskipun ada sinyal BUY, Death Cross adalah peringatan kuat. "                         "Pertimbangkan SHORT atau hindari posisi hingga tren lebih jelas."                     )                 else: # Investor                     ai_strategy_advice = (                         "AI Agent: Sebagai INVESTOR, Death Cross MACD sangat penting. "                         "Hindari posisi LONG. Fokus pada perlindungan modal atau tunggu sinyal pembalikan kuat."                     )            elif "SELL" not in coach_suggestion:                  coach_suggestion = "🔴 SANGAT SELL (Sinyal bearish kuat terkonfirmasi)"                 ai_prediction = f"📉 Waspada turun lebih jauh. MACD Death Cross mengkonfirmasi tren bearish yang kuat. Prediksi penurunan berkelanjutan."                 long_short_analysis_text = "Sinyal kuat menunjukkan kelanjutan tren turun. Posisi SHORT direkomendasikan dengan target profit di level support berikutnya."                 if is_scalper:                     ai_strategy_advice = (                         "AI Agent: Sebagai SCALPER, Death Cross adalah sinyal SHORT yang sangat kuat. "                         "Manfaatkan momentum turun ini dengan target profit agresif dan stop loss ketat."                     )                 else: # Investor                     ai_strategy_advice = (                         "AI Agent: Sebagai INVESTOR, Death Cross MACD mengkonfirmasi tren bearish. "                         "Pertimbangkan untuk keluar dari posisi LONG atau bersiap untuk akumulasi di harga yang lebih rendah."                     )        elif macd_status == "Golden Cross":            if "SELL" in coach_suggestion:                  coach_suggestion = "⏸️ HOLD (Waspada, sinyal Golden Cross muncul)"                 ai_prediction = "📈 MACD Golden Cross mengindikasikan momentum beli. Prediksi perlu kehati-hatian."                 long_short_analysis_text = "Golden Cross menandakan perubahan momentum positif. Hati-hati dengan posisi SHORT."                 if is_scalper:                     ai_strategy_advice = (                         "AI Agent: Sebagai SCALPER, meskipun ada sinyal SELL, Golden Cross adalah peringatan kuat. "                         "Pertimbangkan LONG atau hindari posisi hingga tren lebih jelas."                     )                 else: # Investor                     ai_strategy_advice = (                         "AI Agent: Sebagai INVESTOR, Golden Cross MACD sangat penting. "                         "Pertimbangkan untuk masuk posisi LONG atau tingkatkan alokasi pada koreksi kecil."                     )            elif "BUY" not in coach_suggestion:                  coach_suggestion = "🟢 SANGAT BUY (Sinyal bullish kuat terkonfirmasi)"                 ai_prediction = f"📈 Potensi kenaikan lebih lanjut. MACD Golden Cross mengkonfirmasi tren bullish yang kuat. Prediksi kenaikan berkelanjutan."                 long_short_analysis_text = "Golden Cross mengkonfirmasi tren bullish. Pertimbangkan posisi LONG."                 if is_scalper:                     ai_strategy_advice = (                         "AI Agent: Sebagai SCALPER, Golden Cross adalah sinyal BUY yang sangat kuat. "                         "Manfaatkan momentum naik ini dengan target profit agresif dan stop loss ketat."                     )                 else: # Investor                     ai_strategy_advice = (                         "AI Agent: Sebagai INVESTOR, Golden Cross MACD mengkonfirmasi tren bullish. "                         "Ini adalah waktu yang baik untuk membuka atau menambah posisi LONG. "                         "Fokus pada potensi pertumbuhan jangka panjang."                     )                # NOTE: Candlestick patterns are NOT directly applied as overrides for Forex in the provided code,         # as forex analysis is simulated and does not generate OHLC in the same way crypto does.        # If actual OHLC data for forex was available, this logic would be integrated similarly.        # For now, it will only rely on EMA, RSI, MACD and the initial trend setup.        # --- Rekomendasi Lot (Forex) ---        lot_recommendation_text = None                risk_percent_for_lot = 0.05 if is_scalper else 0.02        risk_amount = modal * risk_percent_for_lot        estimated_stop_loss_pips = 20 if is_scalper else 50                value_per_pip_per_lot = 10         if pair_name == "XAUUSD":             value_per_pip_per_lot = 1         if estimated_stop_loss_pips > 0 and value_per_pip_per_lot > 0:            usd_modal = modal / 16200 # Asumsi kurs 16200 IDR/USD            usd_risk_amount = usd_modal * risk_percent_for_lot            recommended_lot_size = usd_risk_amount / (estimated_stop_loss_pips * value_per_pip_per_lot)                        lot_recommendation_text = f"Rekomendasi Lot: {recommended_lot_size:.2f} Lot (berdasarkan {risk_percent_for_lot*100:.0f}% risiko dari modal)."            if recommended_lot_size < 0.01:                lot_recommendation_text += " (Ukuran lot minimum biasanya 0.01. Pertimbangkan untuk meningkatkan modal atau mengurangi risiko.)"            elif recommended_lot_size > 1:                lot_recommendation_text += " (Ukuran lot besar, sesuaikan dengan toleransi risiko Anda.)"        else:            lot_recommendation_text = "Rekomendasi Lot: Tidak dapat dihitung (data tidak valid)."                    # --- Re-calculate entry_point, cut_loss_plan, target_profit based on the final determined coach_suggestion/strategy ---        # For forex, using simulated price and general percentages        if is_scalper:            risk_percent = 0.002 # 0.2% for forex scalper            reward_percent = 0.003 # 0.3% for forex scalper        else: # Investor            risk_percent = 0.01 # 1% for forex investor            reward_percent = 0.02 # 2% for forex investor        if "BUY" in coach_suggestion:            entry_point = simulated_price * (1 - (0.0005 if is_scalper else 0.001))             cut_loss_plan = entry_point * (1 - risk_percent)            target_profit = entry_point * (1 + reward_percent)        elif "SELL" in coach_suggestion:            entry_point = simulated_price * (1 + (0.0005 if is_scalper else 0.001))            cut_loss_plan = entry_point * (1 + risk_percent)            target_profit = entry_point * (1 - reward_percent)        else: # HOLD / Sideways            entry_point = simulated_price            if is_scalper:                cut_loss_plan = simulated_price * (1 - 0.001)                target_profit = simulated_price * (1 + 0.001)            else:                cut_loss_plan = simulated_price * (1 - 0.005)                target_profit = simulated_price * (1 + 0.005)                # Ensure values are sensible        if cut_loss_plan >= target_profit and "BUY" in coach_suggestion:            cut_loss_plan = entry_point * (1 - risk_percent * 0.5)             target_profit = entry_point * (1 + reward_percent * 0.5)        elif cut_loss_plan <= target_profit and "SELL" in coach_suggestion:            cut_loss_plan = entry_point * (1 + risk_percent * 0.5)            target_profit = entry_point * (1 - reward_percent * 0.5)        display_analysis_results(simulated_price, change_7_day, change_30_day, ema7, ema25, ema99, rsi, macd_status, entry_point, cut_loss_plan, target_profit, market_psychology, pair_trend_24h, ai_prediction, coach_suggestion, is_crypto=False, is_forex_simulated=True, long_short_analysis=long_short_analysis_text, candlestick_patterns=[], lot_recommendation=lot_recommendation_text, ai_strategy_advice=ai_strategy_advice)        if not handle_ai_questions(coach_suggestion, market_psychology, cut_loss_plan, pair_name, is_crypto=False, is_forex_simulated=True):            return                time.sleep(REFRESH_INTERVAL_SECONDS)# --- Menu Utama ---EMOJIS = ["👋", "🚀", "✨", "🌟", "💡", "🎯", "💰", "💎", "🔥", "📈", "📉", "📊"]def get_random_emoji():    return random.choice(EMOJIS)def display_welcome_greeting(username):    width = get_terminal_width()    random_emoji = get_random_emoji()    full_greeting = f"Wellcome {username}, sang trader terhebat {random_emoji}"    print("\n" + center_text(full_greeting, width))    print("-" * width)def main_menu():    """Menampilkan menu utama aplikasi."""    current_username = ""    credentials = load_credentials()    if credentials:        current_username = credentials.get('username', 'Pengguna')    while True:         clear_screen()        width = get_terminal_width()                display_welcome_greeting(current_username)        top_border = "╔" + "═" * (width - 2) + "╗"        bottom_border = "╚" + "═" * (width - 2) + "╝"        middle_border = "╠" + "═" * (width - 2) + "╣"                title_line = "║" + center_text("💎 Crypto-Terminal AI: ANALYZER PRO 📈", width - 2) + "║"        empty_line = "║" + " " * (width - 2) + "║"                option1 = "   [1] 📊 ANALISIS COIN CRYPTO"        option2 = "   [2] 📈 ANALISIS FOREX"        option3 = "   [3] 🤖 AI COACH MENTOR"        option0 = "   [0] ❌ KELUAR DARI APLIKASI"        option1_padded = "║" + option1 + " " * (width - 2 - len(option1)) + "║"        option2_padded = "║" + option2 + " " * (width - 2 - len(option2)) + "║"        option3_padded = "║" + option3 + " " * (width - 2 - len(option3)) + "║"        option0_padded = "║" + option0 + " " * (width - 2 - len(option0)) + "║"        print(top_border)        print(title_line)        print(middle_border)        print(empty_line)        print(option1_padded)        print(option2_padded)        print(option3_padded)        print(empty_line)        print(option0_padded)        print(empty_line)        print(bottom_border)        print("\n" + center_text("🚀 SIAP UNTUK MENGUASAI PASAR? PILIH OPSI ANDA! 🚀", width))        pilihan = input("\n➡️ Pilihan Anda: ").strip()        if pilihan == '1':            analyze_crypto_coin()        elif pilihan == '2':            analyze_forex_pair()        elif pilihan == '3':            start_general_ai_coach_conversation()         elif pilihan == '0':            print_wrapped("\n👋 Sampai jumpa! Terima kasih telah menggunakan AI Trading Assistant.", width=width)            break         else:            print_wrapped("❌ Pilihan tidak valid, silakan coba lagi.", width=width, initial_indent="❌ ")            time.sleep(1)# --- Jalankan Aplikasi ---if __name__ == "__main__":    try:        import requests        import re        import textwrap     except ImportError as e:        print(f"ERROR: Pustaka yang diperlukan tidak ditemukan: {e}. Harap instal dengan: pip install requests")        print("Pastikan pustaka 're' (regex) dan 'textwrap' sudah tersedia atau diinstal.")        exit()    if login():         main_menu()